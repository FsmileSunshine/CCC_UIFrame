// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        width: { value: 0.1 }
        strength: { value: 1.2 }
        k1: { value: -1.0 }
        time: { value: -1.0 }
        k2: { value: -1.0 }
        turningPoint: { value: 1.0 }
        factor: { value: 1.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS{
    float width;
    float strength;
    float k1;
    float time;
    float k2;
    float turningPoint;
    float factor;
  };

  void main () {
    vec4 color = vec4(1, 1, 1, 1);
    color *= texture(texture, v_uv0);
      if(time >= 0.0){
        if(v_uv0.x <= turningPoint){ 
          if(v_uv0.y >= k1 * v_uv0.x - factor + time  &&
             v_uv0.y <=  k1 * v_uv0.x  + time
              ){
               color *= strength;
          }
        }else{ 
          if(v_uv0.y >= k2 * v_uv0.x + (k1 - k2) * turningPoint - factor + time &&
            v_uv0.y <= k2 * v_uv0.x + (k1 - k2) * turningPoint + time
          ){
            color *= strength;
          }
        }         
      }


    gl_FragColor = color;
  }
}%
